# src/pipeline_llm.py
from __future__ import annotations

import os
import re
from typing import Dict, List, Tuple, Optional

import pandas as pd

from .metrics import date_coverage, push_length_stats, push_quality_summary
from .utils import read_data, last_month_span, month_word, kzt
from .scorer import compute_features_for_client, score_products
from .pushgen_llm import generate_personalized_push, ensure_cta

# ----------------------------
#   –ü–ê–ü–ö–ò/–ü–£–¢–ò
# ----------------------------
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
DATA_DIR = os.path.join(BASE_DIR, "data")
OUT_DIR = os.path.join(BASE_DIR, "output")
os.makedirs(OUT_DIR, exist_ok=True)

# ----------------------------
#   –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –í–´–ì–û–î–´
# ----------------------------
def estimate_benefit(
    product: str,
    tx_client: pd.DataFrame,
    feats: Dict,
    avg_bal: float,
    period: Tuple[pd.Timestamp, pd.Timestamp],
) -> Tuple[float, Dict]:
    """
    –£–ø—Ä–æ—â—ë–Ω–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã ¬´–æ–∂–∏–¥–∞–µ–º–æ–π –≤—ã–≥–æ–¥—ã¬ª (–≤ –¥—É—Ö–µ –¢–ó).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (benefit_num, meta), –≥–¥–µ meta ‚Äî –ø–æ—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏.
    """
    start, end = period
    tx_last = tx_client[(tx_client["date"] >= start) & (tx_client["date"] < end)].copy()
    total_spend = float(tx_last["amount"].sum())

    # –≠–≤—Ä–∏—Å—Ç–∏–∫–∏/–∫–∞–ø–ø—ã
    TRAVEL_CB = 0.04
    TRAVEL_CAP = 15_000.0
    PREMIUM_TIER = 0.02 if avg_bal < 1_000_000 else (0.03 if avg_bal < 3_000_000 else 0.04)
    ATM_FEE_SAVED = 300.0
    TRANSFER_FEE_SAVED = 200.0
    PREMIUM_CAP = 20_000.0
    CC_CAP = 20_000.0

    travel_sum  = float(feats.get("TRAVEL_SPEND", 0.0))
    online_sum  = float(feats.get("ONLINE_SPEND", 0.0))
    premium_sum = float(feats.get("PREMIUM_SPEND", 0.0))

    if product == "–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π":
        cb = min(TRAVEL_CB * travel_sum, TRAVEL_CAP)
        return cb, {
            "total_spend": total_spend,
            "calc": f"{TRAVEL_CB*100:.0f}% √ó travel ({int(travel_sum):,}) ‚Üí cap {int(TRAVEL_CAP):,}".replace(",", " ")
        }

    if product == "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞":
        base_cb   = PREMIUM_TIER * total_spend
        boost_cb  = 0.04 * premium_sum
        saved_fees = feats.get("ATM_CNT", 0) * ATM_FEE_SAVED + feats.get("TRANSFER_CNT", 0) * TRANSFER_FEE_SAVED
        benefit = min(base_cb + boost_cb + saved_fees, PREMIUM_CAP)
        return benefit, {
            "tier": PREMIUM_TIER, "total_spend": total_spend,
            "premium_sum": premium_sum, "saved_fees": saved_fees
        }

    if product == "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞":
        cat_sum = tx_last.groupby("category")["amount"].sum().sort_values(ascending=False)
        top3_sum = float(cat_sum.head(3).sum())
        top3_names = ", ".join(cat_sum.head(3).index.tolist())
        benefit = min(0.10 * top3_sum + 0.10 * online_sum, CC_CAP)
        return benefit, {"top3_sum": top3_sum, "online_sum": online_sum, "top3_names": top3_names}

    # –ü—Ä–æ—á–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã ‚Äî –±–µ–∑ —è–≤–Ω–æ–π —Ñ–æ—Ä–º—É–ª—ã
    return 0.0, {"total_spend": total_spend}

# ----------------------------
#   –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–ï–ö–°–¢–û–í PUSH
# ----------------------------
MAX_PUSH_LEN = 220  # –ø–æ –¢–ó –æ—Ä–∏–µ–Ω—Ç–∏—Ä 180‚Äì220

def _push_ok(text: str) -> Tuple[bool, List[str]]:
    """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø—É—à–∞."""
    issues: List[str] = []
    if not isinstance(text, str) or not text.strip():
        issues.append("–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
        return False, issues
    if len(text) > MAX_PUSH_LEN:
        issues.append(f"–¥–ª–∏–Ω–∞ {len(text)} > {MAX_PUSH_LEN}")
    if text.count("!") > 1:
        issues.append("–±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ '!'")
    # –ø—Ä–æ—Å—Ç–æ–π —á–µ–∫ CTA
    if not re.search(r"(–û—Ç–∫—Ä—ã—Ç—å|–û—Ñ–æ—Ä–º–∏—Ç—å|–ü–æ–¥–∫–ª—é—á–∏—Ç—å|–ü–æ–¥–∫–ª—é—á–∏—Ç–µ|–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ù–∞—Å—Ç—Ä–æ–∏—Ç—å)\b", text, re.IGNORECASE):
        issues.append("–Ω–µ—Ç —è–≤–Ω–æ–≥–æ CTA (–û—Ç–∫—Ä—ã—Ç—å/–û—Ñ–æ—Ä–º–∏—Ç—å/–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–ù–∞—Å—Ç—Ä–æ–∏—Ç—å/–ü–æ–¥–∫–ª—é—á–∏—Ç—å)")
    return (len(issues) == 0), issues

def validate_and_report(clients_df: pd.DataFrame, out_df: pd.DataFrame) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è clients ‚Üî pushes –∏ –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤.
    –ü–µ—á–∞—Ç–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç—á—ë—Ç –≤ –∫–æ–Ω—Å–æ–ª—å.
    """
    uniq_clients = set(pd.to_numeric(clients_df["client_code"], errors="coerce").dropna().astype(int))
    uniq_pushes  = set(pd.to_numeric(out_df["client_code"], errors="coerce").dropna().astype(int))

    missing = sorted(uniq_clients - uniq_pushes)
    extra   = sorted(uniq_pushes - uniq_clients)
    dups    = out_df["client_code"][out_df["client_code"].duplicated(keep=False)].tolist()

    total_clients = len(uniq_clients)
    total_pushes  = out_df["client_code"].nunique()

    bad_rows: List[Tuple[int, List[str]]] = []
    for _, r in out_df.iterrows():
        ok, issues = _push_ok(r["push_notification"])
        if not ok:
            bad_rows.append((int(r["client_code"]), issues))

    if total_clients == total_pushes and not missing and not dups:
        print(f"‚úÖ {total_clients} –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚Üí {total_pushes} –ø—É—à–µ–π ‚Üí –≤—Å—ë –æ–∫")
    else:
        print(f"‚ö†Ô∏è  {total_clients} –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚Üí {total_pushes} –ø—É—à–µ–π")
    if missing:
        print("   ‚ñ∏ –Ω–µ—Ç –ø—É—à–µ–π –¥–ª—è client_code:", ", ".join(map(str, missing[:20])), ("‚Ä¶ +" + str(len(missing)-20)) if len(missing)>20 else "")
    if dups:
        print("   ‚ñ∏ –¥—É–±–ª–∏–∫–∞—Ç—ã client_code –≤ –≤—ã—Ö–æ–¥–µ:", dups[:20], ("‚Ä¶ +" + str(len(dups)-20)) if len(dups)>20 else "")
    if extra:
        print("   ‚ñ∏ –µ—Å—Ç—å client_code, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ clients.csv:", extra[:20])

    if bad_rows:
        print("   ‚ñ∏ —Ç–µ–∫—Å—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –ø—Ä–∞–≤–∫–∏ (–ø–µ—Ä–≤—ã–µ 10):")
        for cid, issues in bad_rows[:10]:
            print(f"     - client {cid}: {', '.join(issues)}")
    else:
        print("üß™ –¢–µ–∫—Å—Ç—ã –ø—É—à–µ–π –ø—Ä–æ—Ö–æ–¥—è—Ç –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (‚â§220, ‚â§1 '!', –µ—Å—Ç—å CTA).")

def save_and_validate(clients_df: pd.DataFrame, rows: List[Tuple[int, str, str]]) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç submission.csv –∏ –ø–µ—á–∞—Ç–∞–µ—Ç –æ—Ç—á—ë—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (–¥–ª–∏–Ω—ã/CTA/coverage –¥–∞—Ç).
    rows: [(client_code, product, push_text)]
    """
    out = pd.DataFrame(rows, columns=["client_code","product","push_notification"])
    out_path = os.path.join(OUT_DIR, "submission.csv")
    out.to_csv(out_path, index=False, encoding="utf-8-sig")
    print("Saved:", out_path)

    # ----- –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ –∏ —Ç–µ–∫—Å—Ç–æ–≤ -----
    validate_and_report(clients_df, out)

    # ----- –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—É—à–µ–π -----
    push_stats = push_length_stats(out)
    push_stats_path = os.path.join(OUT_DIR, "push_stats.csv")
    push_stats.to_csv(push_stats_path, index=False, encoding="utf-8-sig")

    summary = push_quality_summary(push_stats)
    summary_path = os.path.join(OUT_DIR, "push_quality_summary.json")
    pd.Series(summary, dtype="object").to_json(summary_path, force_ascii=False, indent=2)

    print("‚Äî Push Quality ‚Äî")
    print(f"   –ö–æ–ª-–≤–æ –ø—É—à–µ–π: {summary['count']}")
    print(f"   –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {summary['avg_length']:.1f} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   –î–æ–ª—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 180‚Äì220: {summary['pct_in_range']*100:.1f}%")
    print(f"   –î–æ–ª—è —Å CTA: {summary['pct_has_cta']*100:.1f}%")
    print(f"   –î–æ–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ CTA: {summary['unique_cta_ratio']*100:.1f}%")
    if summary["top_cta"]:
        top_str = ", ".join([f"{k}: {v}" for k, v in summary["top_cta"].items()])
        print(f"   –¢–æ–ø-CTA: {top_str}")

    # ----- Coverage –¥–∞—Ç –ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞—Ç–∞—Å–µ—Ç–∞–º -----
    try:
        _, txx, trr = read_data(DATA_DIR)
        cov_tx = date_coverage(txx)
        cov_tr = date_coverage(trr)
        cov_df = pd.DataFrame(
            [
                {"table": "transactions", **cov_tx},
                {"table": "transfers", **cov_tr},
            ]
        )
        cov_path = os.path.join(OUT_DIR, "date_coverage.csv")
        cov_df.to_csv(cov_path, index=False, encoding="utf-8-sig")
        print("‚Äî Date Coverage ‚Äî")
        for _, r in cov_df.iterrows():
            print(f"   {r['table']}: {r['ok']}/{r['total']} ‚Üí {r['coverage']*100:.1f}%")
    except Exception as e:
        print("Coverage calc error:", e)

# ----------------------------
#   –•–ï–õ–ü–ï–†–´ –°–ë–û–†–ö–ò –ö–û–ù–¢–ï–ö–°–¢–ê
# ----------------------------
def _build_demo(row: pd.Series) -> Dict:
    """–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è –∏–∑ clients.csv ‚Äî –º—è–≥–∫–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ–Ω –ø—É—à–∞."""
    return {
        "status": row.get("status"),
        "age": int(row["age"]) if "age" in row and str(row["age"]).isdigit() else None,
        "city": row.get("city"),
    }

def _build_ctx_map(feats: Dict, avg_bal: float, benefit_num: float, meta: Dict) -> Dict:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –∏ ¬´—Å—ã—Ä—ã–µ¬ª —á–∏—Å–ª–∞."""
    return {
        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        "travel_sum":  kzt(feats["TRAVEL_SPEND"]),
        "avg_balance": kzt(avg_bal),
        "premium_sum": kzt(feats["PREMIUM_SPEND"]),
        "online_sum":  kzt(feats["ONLINE_SPEND"]),
        "fx_turnover": kzt(feats["FX_TURNOVER"]),
        "shortfall":   kzt(feats["SHORTFALL"]),
        "free_bal":    kzt(feats["FREE_BAL_3M"]),
        "fav": ", ".join(feats["FAV_CATS"]) if feats["FAV_CATS"] else "-",
        "atm_cnt":     feats["ATM_CNT"],
        "transfer_cnt":feats["TRANSFER_CNT"],
        # —á–∏—Å–ª–æ–≤—ã–µ
        "travel_sum_num":  float(feats["TRAVEL_SPEND"]),
        "avg_balance_num": float(avg_bal),
        "premium_sum_num": float(feats["PREMIUM_SPEND"]),
        "online_sum_num":  float(feats["ONLINE_SPEND"]),
        "fx_turnover_num": float(feats["FX_TURNOVER"]),
        "shortfall_num":   float(feats["SHORTFALL"]),
        "free_bal_num":    float(feats["FREE_BAL_3M"]),
        # –≤—ã–≥–æ–¥–∞/–æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å
        "benefit": kzt(benefit_num),
        "benefit_num": float(benefit_num),
        "top3_names": meta.get("top3_names", ""),
    }

# ----------------------------
#   MAIN (CLI-—Ä–µ–∂–∏–º)
# ----------------------------
if __name__ == "__main__":
    # 0) —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    clients, tx, tr = read_data(DATA_DIR)

    rows: List[Tuple[int, str, str]] = []
    for _, row in clients.iterrows():
        cid = int(row["client_code"])
        name = row.get("name", "–ö–ª–∏–µ–Ω—Ç")

        # –∫–æ–ª–æ–Ω–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ ‚Äî —Å—Ç—Ä–æ—á–Ω—ã–º–∏
        val = row.get("avg_monthly_balance_kzt")
        avg_bal = float(val) if pd.notna(val) else 0.0

        tx_client = tx[tx["client_code"] == cid].copy()
        tr_client = tr[tr["client_code"] == cid].copy()

        dspan_tx = last_month_span(tx_client["date"])
        dspan_tr = last_month_span(tr_client["date"])

        # 1) –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö, –Ω–∏ –≤ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö ‚Üí –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
        if dspan_tx[0] is None and dspan_tr[0] is None:
            product = "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞"
            month = "—ç—Ç–æ–º –º–µ—Å—è—Ü–µ"

            feats = {
                "TOTAL_SPEND": 0.0,
                "TRAVEL_SPEND": 0.0, "PREMIUM_SPEND": 0.0, "ONLINE_SPEND": 0.0,
                "FX_TURNOVER": 0.0, "SHORTFALL": 0.0, "FREE_BAL_3M": avg_bal * 3 / 12,
                "FAV_CATS": [], "ATM_CNT": 0, "TRANSFER_CNT": 0,
            }
            benefit_num, meta = 0.0, {}
            demo = _build_demo(row)
            ctx_map = _build_ctx_map(feats, avg_bal, benefit_num, meta)

            push = generate_personalized_push(product, name, month, ctx_map, demo, max_len=MAX_PUSH_LEN)
            push = ensure_cta(product, push)  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º CTA
            rows.append((cid, product, push))
            continue

        # 2) –≤—ã–±–∏—Ä–∞–µ–º —Å–≤–µ–∂–∏–π –ø–µ—Ä–∏–æ–¥: transactions vs transfers
        end_tx = dspan_tx[1] if dspan_tx[1] is not None else pd.Timestamp.min
        end_tr = dspan_tr[1] if dspan_tr[1] is not None else pd.Timestamp.min
        start, end = (dspan_tx if end_tx >= end_tr else dspan_tr)

        month = month_word(end - pd.offsets.Day(1))

        # 3) —Ñ–∏—á–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
        feats = compute_features_for_client(tx_client, tr_client, avg_bal, (start, end))

        # 4) –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞
        best, top4, scores = score_products(feats, avg_bal)

        # 5) –æ—Ü–µ–Ω–∫–∞ –≤—ã–≥–æ–¥—ã
        benefit_num, meta = estimate_benefit(best, tx_client, feats, avg_bal, (start, end))

        # 6) –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—è + –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        demo = _build_demo(row)
        ctx_map = _build_ctx_map(feats, avg_bal, benefit_num, meta)

        # 7) –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—à–∞
        push = generate_personalized_push(best, name, month, ctx_map, demo, max_len=MAX_PUSH_LEN)
        push = ensure_cta(best, push)  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º CTA
        rows.append((cid, best, push))

    # 8) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ + –æ—Ç—á—ë—Ç—ã/–º–µ—Ç—Ä–∏–∫–∏
    save_and_validate(clients, rows)